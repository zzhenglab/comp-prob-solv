Traceback (most recent call last):
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\52377\.conda\envs\chem508\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\52377\.conda\envs\chem508\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np

def minimum_image_distance(p1, p2, box_size):
    """
    Compute the minimum image distance between two particles p1 and p2
    under periodic boundary conditions in a 2D box.

    Parameters:
    p1, p2 : np.ndarray
        Coordinates of the two particles (2D vectors).
    box_size : float
        Length of the simulation box edge.

    Returns:
    float
        Minimum image distance between p1 and p2.
    """
    delta = p1 - p2
    # Apply minimum image convention
    delta -= box_size * np.round(delta / box_size)
    distance = np.linalg.norm(delta)
    return distance

# Define the box size
box_size = 10.0

# Define positions of the particles
blue_particle = np.array([2.0, 8.0])   # Coordinates of the blue particle
cyan_particle = np.array([9.0, 9.0])   # Coordinates of the cyan particle

# Calculate the minimum image distance
distance = minimum_image_distance(blue_particle, cyan_particle, box_size)
print(f"The minimum image distance between the blue and cyan particles is {distance:.2f} units.")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mnp[39;00m
[0;32m      3[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mminimum_image_distance[39m(p1, p2, box_size):
[0;32m      4[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[0;32m      5[0m [38;5;124;03m    Compute the minimum image distance between two particles p1 and p2[39;00m
[0;32m      6[0m [38;5;124;03m    under periodic boundary conditions in a 2D box.[39;00m
[1;32m   (...)[0m
[0;32m     16[0m [38;5;124;03m        Minimum image distance between p1 and p2.[39;00m
[0;32m     17[0m [38;5;124;03m    """[39;00m

[1;31mModuleNotFoundError[0m: No module named 'numpy'

